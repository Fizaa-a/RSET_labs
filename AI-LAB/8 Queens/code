def is_safe(board, row, col):
    for i in range(row):
        if board[i] == col or \
           board[i] - i == col - row or \
           board[i] + i == col + row:
            return False
    return True

def solve_n_queens(n, board, row, solutions):
    if row == n:
        solutions.append(board[:])
        return  # Do not stop; continue searching for all solutions

    for col in range(n):
        if is_safe(board, row, col):
            board[row] = col
            solve_n_queens(n, board, row + 1, solutions)
            board[row] = -1  # Backtrack

def print_solution(board):
    for i in range(len(board)):
        row = ['Q' if j == board[i] else '.' for j in range(len(board))]
        print(" ".join(row))
    print()

def all_queens(n=8):
    solutions = []
    board = [-1] * n
    solve_n_queens(n, board, 0, solutions)

    print(f"Found {len(solutions)} solution(s):\n")
    for solution in solutions:
        print_solution(solution)

all_queens()
